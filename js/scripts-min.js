function Cart(t) { this.elCartContainer = t, this.elButtonMinus = null, this.elButtonPlus = null, this.elButtonBuy = null, this.elButtonDelete = null, this.elInputValue = null, this.elInputSum = null, this.elLocalCity = null, this.itemId = null, this.value = null, this.sum = null, this.csrf = null, this.isStored = null, this.urlPost = "/catalog/cart", this.init = function () { this.linkElements(), this.hookActions() }, this.updateCartView = function () { this.elInputValue.val(this.value), this.elInputValue.attr("data-stored", this.isStored), this.elInputSum.text(this.sum), this.value > 0 ? this.elButtonBuy.removeClass("btn-link").addClass("btn-outline-success") : this.elButtonBuy.removeClass("btn-outline-success").addClass("btn-link") }, this.sendToServer = function () { let t = []; t.push({ itemId: this.itemId, count: this.value }), $.post({ url: this.urlPost, data: { items: t, _token: this.csrf }, datatype: "json", obj: this, success: function (t) { this.obj.value = t.count, this.obj.sum = number_format(t.sum, 0, ",", " "), this.obj.isStored = 1, $(".js__cartHolder").html(t.cart), $(".js__cartHolderBig").html(t.order), console.log(t.sum_total), this.obj.updateCartView() } }) }, this.pressMinus = function () { this.value > 0 && (this.value--, this.updateCartView(), this.sendToServer()) }, this.pressPlus = function () { this.value < 1e4 && (void 0 !== this.elCartContainer.find(".in_local_city")[0] ? this.value < parseInt(this.elLocalCity[0].hasAttribute("data-local-count") ? this.elLocalCity[0].dataset.localCount : 1e4) && (this.value++, this.updateCartView(), this.sendToServer()) : (this.value++, this.updateCartView(), this.sendToServer())) }, this.pressChange = function () { let t = parseInt(this.elInputValue.val()); void 0 !== this.elCartContainer.find(".in_local_city")[0] ? t > 0 && t < parseInt(this.elLocalCity[0].hasAttribute("data-local-count") ? this.elLocalCity[0].dataset.localCount : 1e4) && (this.value = t, this.updateCartView(), this.sendToServer()) : t > 0 && t <= 1e4 && (this.value = t, this.updateCartView(), this.sendToServer()) }, this.pressBuy = function () { this.isStored && this.value > 0 && confirm("Удалить товар из корзины?") ? this.value = 0 : 0 == this.value && (this.value = 1), this.updateCartView(), this.sendToServer() }, this.pressDelete = function () { this.value = 0, this.updateCartView(), this.sendToServer(), this.elCartContainer.remove() }, this.linkElements = function () { this.elButtonMinus = this.elCartContainer.find(".js__minus"), this.elButtonPlus = this.elCartContainer.find(".js__plus"), this.elButtonBuy = this.elCartContainer.find(".js__buy"), this.elButtonDelete = this.elCartContainer.find(".js__delete"), this.elInputValue = this.elCartContainer.find(".js__value"), this.elInputSum = this.elCartContainer.find(".js__cart_sum"), this.elLocalCity = this.elCartContainer.find(".in_local_city"), this.itemId = this.elInputValue.attr("data-id"), this.value = parseInt(this.elInputValue.val()), this.sum = this.elInputSum.text(), this.isStored = 1 === parseInt(this.elInputValue.attr("data-stored")), this.csrf = $('meta[name="csrf-token"]').attr("content") }, this.hookActions = function () { this.elInputValue.bind("change", { obj: this }, function (t) { return t.data.obj.pressChange(), !1 }), this.elButtonMinus.bind("click", { obj: this }, function (t) { return t.data.obj.pressMinus(), !1 }), this.elButtonPlus.bind("click", { obj: this }, function (t) { return t.data.obj.pressPlus(), !1 }), this.elButtonBuy.bind("click", { obj: this }, function (t) { return t.data.obj.pressBuy(), !1 }), this.elButtonDelete.bind("click", { obj: this }, function (t) { return t.data.obj.pressDelete(), !1 }) } } function showPopup(t) { let e = t.attr("data-popup-url"); console.log(e), $.get(e, function (t) { $("#itemPopup .js__content").html(t.html), $("#itemPopup").modal("show"), $("#itemPopup .js__cart").each(function () { new Cart($(this)).init() }) }, "json") } function cartSubmit(t) { let e = $('meta[name="csrf-token"]').attr("content"), i = t.parents(".js__cart"), s = i.find(".js__value"), n = s.attr("data-id"), l = s.val(), o = []; o.push({ itemId: n, count: l }); let a = { items: o, _token: e }; $.post("/catalog/cart", a, function (t) { i.find(".js__value").val(t.count), i.find(".js__cart_sum").text(number_format(t.sum, 0, ",", " ")), i.find(".js__value").attr("data-stored", 1), t.count > 0 ? i.find(".js__buy").removeClass("btn-link").addClass("btn-outline-success") : i.find(".js__buy").removeClass("btn-outline-success").addClass("btn-link") }, "json") } function number_format(t, e, i, s) { var n, l; return isNaN(e = Math.abs(e)) && (e = 2), null == i && (i = ","), null == s && (s = "."), (l = (n = parseInt(t = (+t || 0).toFixed(e)) + "").length) > 3 ? l %= 3 : l = 0, (l ? n.substr(0, l) + s : "") + n.substr(l).replace(/(\d{3})(?=\d)/g, "$1" + s) + (e ? i + Math.abs(t - n).toFixed(e).replace(/-/, 0).slice(2) : "") } function control_price() { $("h1.my-2").text() } $(document).ready(function () { $(".itemSlider").lightSlider({ item: 1, autoWidth: !0, slideMove: 4, pager: !1, loop: !0, onSliderLoad: function () { $(".itemSlider").removeClass("invisible") } }), $(".itemSliderBig").lightSlider({ item: 1, pager: !1, loop: !0, auto: !0, speed: 1e3, pause: 4e3, onSliderLoad: function () { $(".itemSliderBig").removeClass("invisible") } }), $(".js_login_modal").click(function () { $.get("/modal/login", function (t) { $("#modalPopup .modal-dialog").html(t) }) }), $(".js__cart").each(function () { new Cart($(this)).init() }), $(".js__popup").click(function () { showPopup($(this)) }), $(".js__delete_all").click(function () { $(".js__cart").each(function () { let t = $(this).find(".js__value"); t.val(0), cartSubmit(t) }) }) }); let elements = $(".modal-overlay-city, .modal-city"); function setCookie(t, e, i = {}) { (i = { path: "/", ...i }).expires instanceof Date && (i.expires = i.expires.toUTCString()); let s = encodeURIComponent(t) + "=" + encodeURIComponent(e); for (let t in i) { s += "; " + t; let e = i[t]; !0 !== e && (s += "=" + e) } document.cookie = s } $("#city-change").click(function () { elements.addClass("active") }), $(".close-modal-city").click(function () { elements.removeClass("active") }), $(".modal-city-button").click(function () { elements.removeClass("active"); let t = $(this).data("city"); console.log("setcookie " + t), setCookie("city", t, { "max-age": 432e3 }), $("#city-change").text(city[t]), document.location.reload(!0) }), $(document).ready(function () { let t = getCookie("city"); console.log("cityName = " + t), $("#city-change").text(city[t]) }), $(document).ready(setTimeout(function () { null == getCookie("city") && $("#city-change").trigger("click") }, 2e3));
